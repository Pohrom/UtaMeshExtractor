//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

// 3E 3F : signal of float

typedef struct {
    char    name1[32];
    char    name2[32];
    char    padding1[16];
    uint32  size;
    char    padding2[8];
    char    data[size];
} TEXTURE <optimize=false>;

typedef struct {
    // vertex
    float   v1;
    float   v2;
    float   v3;
    // normals
    float   vn1;
    float   vn2;
    float   vn3;
    // UV
    float   vt1;
    float   vt2;
    float   vt3;
} FVFBlock;

typedef struct {
    uint16  i1;
    uint16  i2;
    uint16  i3;
} FaceIndice;

typedef struct {
    uint32      unknown1;
    uint32      vertex_count;
    uint32      faceindice_count;
    uint32      unknown2;
    uint32      unknown3;
    FVFBlock    blocks[vertex_count];
    uint32      unknown4;
    uint32      unknown5;
    FaceIndice  faces[faceindice_count / 3];
} MESH <optimize=false>;

typedef struct {
    local int64 baseAddress = FTell();
    uint32  submesh_count;
    uint32  submeshOffset[submesh_count];
    local unsigned int i = 0;
    for(i = 0;i < submesh_count;i++)
    {
        FSeek(baseAddress + submeshOffset[i]);
        MESH submesh;
    }
} MESHS;


typedef struct {
    local int64 baseAddress = FTell();
    uint32  count;
    uint32  textureOffset[count];
    local unsigned int i = 0;
    for(i = 0;i < count;i++)
    {
        FSeek(baseAddress + textureOffset[i]);
        TEXTURE texture;
    }
} TEXTURES;

typedef struct {
    char    name[24]; // length may be incorrect
    char    data[172];
} NODE; // C4h

typedef struct {
    uint32 node_count;
    uint32 unknown_length;
    NODE node[node_count];
    char    unknown[unknown_length+2];
} NODES;

typedef struct {
    char name[32]; // length may be incorrect
    char data[24];
} MATERIAL; // 38h

typedef struct {
    uint32 material_count;
    MATERIAL material[material_count];
} MATERIALS;

typedef struct {
    char data[112];
} DRAWLISTITEM; // 38h

typedef struct {
    uint32  drawListItem_count;
    char    unknown[20];
    DRAWLISTITEM drawListItem[drawListItem_count];
} DRAWLISTS;

typedef struct {
    char    tag[8];
    uint32  length;
    if (tag == "Texture ")
        TEXTURES    textures;
    else if (tag == "Mesh    ")
        MESHS meshs;
    else if (tag == "Node    ")
        NODES nodes;
    else if (tag == "Material")
        MATERIALS materials;
    else if (tag == "DrawList")
        DRAWLISTS drawList;
    else
        char    data[length-sizeof(tag)-sizeof(length)];
} CHUNK <read=readCHUNK>;

string readCHUNK(CHUNK& chunk){
    return chunk.tag;
}

BigEndian();
local int64 ChunkBaseAddress = FTell();
while(!FEof()){
    if (FileSize() - FTell() == 4){
        return 0;
    }
    ChunkBaseAddress = FTell();
    CHUNK chunk; // my chunk may not cover whole physics chunk
    FSeek(ChunkBaseAddress + chunk.length); // jump to correct end
}
